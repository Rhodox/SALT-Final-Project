router.put("/messages", async (req, res) => {
	if (!req.body) {
		console.log("PUT to messages was stopped, missing data in request");
		res.json("ERROR: Missing data in request").status(400).end();
	} else if (req.body.from === req.body.to) {
		console.log("You cannot send messages to yourself!");
		res.json("ERROR: Cannot send message to yourself").status(400).end();
	}

	const rawData = await mongo.db();

	const sender = await queries.getUser(rawData, req.body.from);
	const senderName = sender[0].username;

	const recipient = await queries.getUser(rawData, req.body.to);
	const recipientName = recipient[0].username;

	// console.log(req.body, "<--- req.body");

	// console.log(sender, "<--- Sender");
	// console.log(recipient, "<--- Recipient");
	// console.log(recipientName, "<-- rec name");

	console.log(`
		FROM: ${senderName}.
		TO: ${recipientName}
		MESSAGE: ${req.body.messageObj.message}
	
	`);

	// console.log(sender[0].messages[recipientName], "<-- sender - correspondance");
	// if (!sender[0].messages[recipientName]) {
	// 	const generateCorrespondance = {
	// 		...sender[0].messages,
	// 		[recipientName]: {
	// 			sent: [],
	// 			received: [],
	// 		},
	// 	};

	// 	await rawData.updateOne(
	// 		{ username: senderName },
	// 		{ $set: { messages: generateCorrespondance } }
	// 	);
	// }

	// const senderNewMessages = {
	// 	...sender[0].messages,
	// 	[recipientName]: {
	// 		sent: [
	// 			{
	// 				timestamp: req.body.messageObj.timestamp,
	// 				message: req.body.messageObj.message,
	// 				read: false,
	// 			},
	// 			...(sender[0].messages[recipientName].sent === undefined
	// 				? []
	// 				: sender[0].messages[recipientName].sent),
	// 		],
	// 		received: [
	// 			...(sender[0].messages[recipientName].received === undefined
	// 				? []
	// 				: sender[0].messages[recipientName].received),
	// 		],
	// 	},
	// };

	// console.log(recipient[0].messages[senderName], "<-- recipient - correspondance");
	// if (!recipient[0].messages[senderName]) {
	// 	const generateCorrespondance = {
	// 		...recipient[0].messages,
	// 		[senderName]: {
	// 			sent: [],
	// 			received: [],
	// 		},
	// 	};

	// 	await rawData.updateOne(
	// 		{ username: recipientName },
	// 		{ $set: { messages: generateCorrespondance } }
	// 	);
	// }

	// const recipientNewMessages = {
	// 	...recipient[0].messages,
	// 	[senderName]: {
	// 		sent: [
	// 			...(recipient[0].messages[senderName].sent === undefined
	// 				? []
	// 				: recipient[0].messages[senderName].sent),
	// 		],
	// 		received: [
	// 			{
	// 				timestamp: req.body.messageObj.timestamp,
	// 				message: req.body.messageObj.message,
	// 				read: false,
	// 			},
	// 			...(recipient[0].messages[senderName].received === undefined
	// 				? []
	// 				: recipient[0].messages[senderName].received),
	// 		],
	// 	},
	// };
	// console.log(recipientNewMessages, "<-- recipientNewMessages");

	const updateSender = await rawData.updateOne(
		{ username: senderName },
		{ $set: { messages: senderNewMessages } }
	);

	const updateRecipient = await rawData.updateOne(
		{ username: recipientName },
		{ $set: { messages: recipientNewMessages } }
	);

	const updates = [updateSender, updateRecipient];

	res.json(updates).status(200).end();
});
